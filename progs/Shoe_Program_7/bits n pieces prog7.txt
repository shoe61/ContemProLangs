private void openToolStripMenuItem_Click_1(object sender, EventArgs e)
        {
            if (DentalOpenFileDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                System.IO.StreamReader dsr = new
                    System.IO.StreamReader(DentalOpenFileDialog.FileName);
                MessageBox.Show(dsr.ReadToEnd());
                dsr.Close();
            }
        }
		
//*******************************************************************************************************************

// Create a dental forms window
        private void dentalFormToolStripMenuItem_Click(object sender, EventArgs e)
        {
            // Create a new child; assign this form as its parent; display the child
            DentalForm newMDIChild = new DentalForm();
            newMDIChild.MdiParent = this;
            newMDIChild.Show();
        }

        // Create a medical forms window
        private void medicalFormToolStripMenuItem_Click(object sender, EventArgs e)
        {
            // Create a new child; assign this form as its parent; display the child
            FootForm newMDIChild = new FootForm();
            newMDIChild.MdiParent = this;
            newMDIChild.Show();
        }
		
//**********************************************************************************************************************

// Now, read the file line by line, each line becoming a record- book has it in a try block
                    
                    // First, go to the beginning of the file
                    input.Seek(0, SeekOrigin.Begin);
                    
                    // Then, while(true) get the next record in the file
                    while(true)
                    {
                        // read a line
                        string record = fileReader.ReadLine();
                        
                        // Have an exit plan: (if record == null)
                        if (record == null)
                        {
                            return;
                        }

                        // Parse the input; comma separated fields
                        string[] inputFields = record.Split(',');

                        // Create a Record object
                        Record newRec = new Record(int.Parse(inputFields[0]), inputFields[1],
                            int.Parse(inputFields[2]), int.Parse(inputFields[3]), inputFields[4]);

                        // ... and display the records in the TextBox of the appropriate child window.
                        PickensFoot.InventoryTextBox.AppendText() 
						
****************************************************************************************************************************************************************8
		
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;


namespace Shoe_Program_7
{
    public partial class MedicalSupplies : Form
    {
        FileStream input;
        StreamReader fileReader;
        
        
        // parameterless constructor
        public MedicalSupplies()
        {
            InitializeComponent();
        }
        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

        private void openToolStripMenuItem_Click(object sender, EventArgs e)
        {
            // Create Dialog Box to open file
            DialogResult result;
            string workFile;
            
            using(OpenFileDialog topOpenFileDialog = new OpenFileDialog())
            {
                result = topOpenFileDialog.ShowDialog();
                workFile = topOpenFileDialog.FileName;
            }

            if(result == DialogResult.OK)
            {
                // display error if invalid filename
                if(string.IsNullOrEmpty(workFile))
                {
                    MessageBox.Show("Invalid file name.", "Error", 
                        MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                else
                {
                    // create filestream object to get read access
                    input = new FileStream(workFile, FileMode.Open, FileAccess.Read);
                    fileReader = new StreamReader(input);

                    if (workFile.Contains("ental") || workFile.Contains("Lake"))
                    {
                        // Create a new child Dental Form; assign this form as its parent; display the child
                        DentalForm LakeDental = new DentalForm();
                        LakeDental.MdiParent = this;
                        LakeDental.Show();
                    }
                    if (workFile.Contains("foot") || workFile.Contains("odiatry") || workFile.Contains("Foot"))
                    {
                        // Create a new child Foot Form; assign this form as its parent; display the child
                        FootForm PickensFoot = new FootForm();
                        PickensFoot.MdiParent = this;
                        PickensFoot.Show();
                    }

                    // Now, read the file line by line, each line becoming a record- book has it in a try block
                    
                    // First, go to the beginning of the file
                    input.Seek(0, SeekOrigin.Begin);
                    
                    // Then, while(true) get the next record in the file
                    while (true)
                    {
                        // read a line
                        string record = fileReader.ReadLine();

                        // Have an exit plan: (if record == null)
                        if (record == null)
                        {
                            return;
                        }

                        // Parse the input; comma separated fields
                        string[] inputFields = record.Split(',');

                        // Create a Record object
                        Record newRec = new Record(int.Parse(inputFields[0]), inputFields[1],
                            int.Parse(inputFields[2]), int.Parse(inputFields[3]), inputFields[4]);

                        // ... and display the records in the TextBox of the appropriate child window.
                        textBox1.AppendText("{newRec.ID}\t" + "{newRec.Name}\t" + "{newRec.QtyReq}\t" + "{newRec.Qty}\t" + "{newRec.Practice}{Environment.NewLine}");
                    }

                }
            }
        }




        private void closeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                fileReader.Close(); // close streamreader and underlying file
            }
            catch
            {
                // if can't close file, notify
                MessageBox.Show("Error: cannot close file.", "Error", 
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            Application.Exit();
        }


    }
}

****************************************************************************************************************************

public insertNewItemForm()
        {
            InitializeComponent();
            var values = MedicalSupplies.values;
            string working = (values[0] + "\t" + values[1] + "\t" + values[2] + "\t" + values[3] + "\t" + values[4]);
            this.idRichTextBox.Text = values[0];
        }
		
************************************************************************************************************************8

//make a new string array of the record
            appendo = new string[]{ temp.ID.ToString(), temp.Name.ToString(), 
                            temp.QtyReq.ToString(), temp.Qty.ToString(), temp.Practice.ToString() };

            string[] sendIt = values.Concat(appendo).ToArray();


            // create filestream object to get write access
            FileStream output = new FileStream(workFile, FileMode.Open, FileAccess.ReadWrite);
		
		
***************************************************************************************************************************

for (int i = 0; i < MedicalSupplies.theList.Count; i++)
            {
                for (int j = 0; j < 5; j++)
                {
                    inventoryListBox.Items.Add(MedicalSupplies.theList[i][j] + "\t" );
                }
            }
			
******************************************************************************************************************************8

// used for creating a serialized file:
       
        private void MedicalSupplies_Load_1(object sender, EventArgs e)
        {
            FileStream output = new FileStream("LakeDentalClinic.inv",
               FileMode.OpenOrCreate, FileAccess.Write);

            Record rex = new Record();
            rex.ID = 0881;
            rex.Name = "fake tooth";
            rex.QtyReq = 30;
            rex.Qty = 23;
            rex.Practice = "Lake Dental Clinic";

            reader.Serialize(output, rex);
        }
        
 **************************************************************************************************************************************
 
 ********************************************************************************************************************************

 public partial class PracticeForm : Form
    {
        private FileStream input;
        string workFile = MedicalSupplies.workFile;
        string[] values;
        List<string[]> myList;
        BinaryFormatter thisreader;




        //*****************************************************************************************     

        public PracticeForm()
        {
            InitializeComponent();

        }

        public void getMyInv()
        {

            // superseded
        }

        public void displayInv()
        {
            //none

        }

        private void PracticeForm_Load(object sender, EventArgs e)
        {
            // create filestream object to get read access
            input = new FileStream(workFile, FileMode.Open, FileAccess.ReadWrite);

            // go to beginning of file
            input.Seek(0, SeekOrigin.Begin);

            // clear the list before each file opening
            //myList.Clear();

            // deserialize and display in text box
            try
            {
                // iterate over filestream object input, opening a record and appending it to the list
                while (input.Position < input.Length)
                {
                    // get next Record from file
                    Record newRec = (Record)thisreader.Deserialize(input);
                    if (newRec == null) continue;

                    // store Record values in temporary string array
                    values = new string[] { newRec.ID.ToString(), newRec.Name.ToString(), 
                            newRec.QtyReq.ToString(), newRec.Qty.ToString(), newRec.Practice.ToString() };

                    // add current iteration of values to theList
                    myList.Add(values);
                }
                input.Close();
            }

            catch (IOException)
            {
                MessageBox.Show("oops.");
            }

            for (int i = 0; i < myList.Count; i++)
            {
                inventoryListBx.Items.Add(myList[i][0] + "\r\t"
                    + myList[i][1] + "\r\t"
                    + myList[i][2] + "\r\t"
                    + myList[i][3] + "\r\t"
                    + myList[i][4]);
            }
        }


    }
}

*********************************************************************************************************************************

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Shoe_Program_7B
{
    public partial class PracticeForm : Form
    {
        public PracticeForm()
        {
            InitializeComponent();
            
        }

        
        
        public void displayInv()
        {
            for (int i = 0; i < MedicalSupplies.theList.Count; i++)
            {
                inventoryListBx.Items.Add(MedicalSupplies.theList[i][0] + "\r\t"
                    + MedicalSupplies.theList[i][1] + "\r\t"
                    + MedicalSupplies.theList[i][2] + "\r\t"
                    + MedicalSupplies.theList[i][3] + "\r\t"
                    + MedicalSupplies.theList[i][4]);
            }

        }

        
    }
}
